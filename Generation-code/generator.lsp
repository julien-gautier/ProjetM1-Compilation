(defun nbInstr
	(expr)
	(cond ((eql NIL expr) 0)
		((atom expr) 0)
		((listp (car expr)) (+ (nbInstr (car expr)) (nbInstr (cdr expr))))
		((or (eql ':call (car expr)) (eql ':if (car expr)) (eql ':progn (car expr))) (+ 1 (nbInstr (cdr expr))))
		((or (eql ':const (car expr)) (eql ':var (car expr))) (+ 1 (nbInstr (cdr expr))))
		(T (nbInstr (cdr expr)))
	)
)

(defun li2svm
	(expr &rest ll) ; (li2svm <expr1> <expr2> ...) 
	(cond ((eql NIL expr) NIL); si expr est nul -> NIL 
		((atom expr) (progn (warn "ERROR") NIL)) ; si expr n'est pas une list, ce n'est pas une instruction -> NIL
		((eql ':const (car expr))
			(append (list (cons ':CONST (cdr expr))) (apply #'li2svm (car ll) (cdr ll))
			))
		((eql ':var (car expr))
			(append (list (cons ':VAR (cdr expr))) (apply #'li2svm (car ll) (cdr ll))
			))
		((eql ':call (car expr))
			(cond ((eql (cadr expr) '+) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . +)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '-) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . -)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '*) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . *)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '/) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . /)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '<) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . <)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '>) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . >)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '=) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . =)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '<=) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . <=)) (apply #'li2svm (car ll) (cdr ll))))
				((eql (cadr expr) '>=) (append (apply #'li2svm (caddr expr) (cdddr expr)) '((:CALL . >=)) (apply #'li2svm (car ll) (cdr ll))))
			))
		((eql ':if (car expr))
			(append (apply #'li2svm (list (cadr expr))) (list (cons ':SKIPNIL (+ 1 (nbInstr (caddr expr))))) (apply #'li2svm (list (caddr expr))) (list (cons ':SKIP (nbInstr (cdddr expr)))) (apply #'li2svm (cdddr expr)) (apply #'li2svm (car ll) (cdr ll))
			))
		((eql ':progn (car expr))
			(append (apply #'li2svm (cdr expr) ll)
			))
		((listp (car expr)) (append (apply #'li2svm (car expr) (cdr expr)) (apply #'li2svm (car ll) (cdr ll))))
	)
)

;(li2svm '(:progn (:if (:call < (:const . 1) (:const . 2)) (:call + (:const . 7) (:const . 7)) (:call + (:const . 70) (:const . 70))) (:const . 8)))